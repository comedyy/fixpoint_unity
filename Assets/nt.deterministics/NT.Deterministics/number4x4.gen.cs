//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. To update the generation of this file, modify and re-run Unity.Mathematics.CodeGen.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;
using ShuffleComponent = Unity.Mathematics.math.ShuffleComponent;

#pragma warning disable 0660, 0661

namespace Nt.Deterministics
{
    /// <summary>A 4x4 matrix of numbers.</summary>
    [System.Serializable]
    public partial struct float4x4 : System.IEquatable<float4x4>, IFormattable
    {
        /// <summary>Column 0 of the matrix.</summary>
        public float4 c0;
        /// <summary>Column 1 of the matrix.</summary>
        public float4 c1;
        /// <summary>Column 2 of the matrix.</summary>
        public float4 c2;
        /// <summary>Column 3 of the matrix.</summary>
        public float4 c3;

        /// <summary>float4x4 identity transform.</summary>
        public static readonly float4x4 identity = new float4x4((number)(1), (number)(0), (number)(0), (number)(0),   (number)(0), (number)(1), (number)(0), (number)(0),   (number)(0), (number)(0), (number)(1), (number)(0),   (number)(0), (number)(0), (number)(0), (number)(1));

        /// <summary>float4x4 zero value.</summary>
        public static readonly float4x4 zero;

        /// <summary>Constructs a float4x4 matrix from four float4 vectors.</summary>
        /// <param name="c0">The matrix column c0 will be set to this value.</param>
        /// <param name="c1">The matrix column c1 will be set to this value.</param>
        /// <param name="c2">The matrix column c2 will be set to this value.</param>
        /// <param name="c3">The matrix column c3 will be set to this value.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float4x4(float4 c0, float4 c1, float4 c2, float4 c3)
        {
            this.c0 = c0;
            this.c1 = c1;
            this.c2 = c2;
            this.c3 = c3;
        }

        /// <summary>Constructs a float4x4 matrix from 16 number values given in row-major order.</summary>
        /// <param name="m00">The matrix at row 0, column 0 will be set to this value.</param>
        /// <param name="m01">The matrix at row 0, column 1 will be set to this value.</param>
        /// <param name="m02">The matrix at row 0, column 2 will be set to this value.</param>
        /// <param name="m03">The matrix at row 0, column 3 will be set to this value.</param>
        /// <param name="m10">The matrix at row 1, column 0 will be set to this value.</param>
        /// <param name="m11">The matrix at row 1, column 1 will be set to this value.</param>
        /// <param name="m12">The matrix at row 1, column 2 will be set to this value.</param>
        /// <param name="m13">The matrix at row 1, column 3 will be set to this value.</param>
        /// <param name="m20">The matrix at row 2, column 0 will be set to this value.</param>
        /// <param name="m21">The matrix at row 2, column 1 will be set to this value.</param>
        /// <param name="m22">The matrix at row 2, column 2 will be set to this value.</param>
        /// <param name="m23">The matrix at row 2, column 3 will be set to this value.</param>
        /// <param name="m30">The matrix at row 3, column 0 will be set to this value.</param>
        /// <param name="m31">The matrix at row 3, column 1 will be set to this value.</param>
        /// <param name="m32">The matrix at row 3, column 2 will be set to this value.</param>
        /// <param name="m33">The matrix at row 3, column 3 will be set to this value.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float4x4(number m00, number m01, number m02, number m03,
                        number m10, number m11, number m12, number m13,
                        number m20, number m21, number m22, number m23,
                        number m30, number m31, number m32, number m33)
        {
            this.c0 = new float4(m00, m10, m20, m30);
            this.c1 = new float4(m01, m11, m21, m31);
            this.c2 = new float4(m02, m12, m22, m32);
            this.c3 = new float4(m03, m13, m23, m33);
        }

        /// <summary>Constructs a float4x4 matrix from a single number value by assigning it to every component.</summary>
        /// <param name="v">number to convert to float4x4</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float4x4(number v)
        {
            this.c0 = v;
            this.c1 = v;
            this.c2 = v;
            this.c3 = v;
        }

        /// <summary>Constructs a float4x4 matrix from a single bool value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">bool to convert to float4x4</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float4x4(bool v)
        {
            this.c0 = math.select(new float4((number)(0)), new float4((number)(1)), v);
            this.c1 = math.select(new float4((number)(0)), new float4((number)(1)), v);
            this.c2 = math.select(new float4((number)(0)), new float4((number)(1)), v);
            this.c3 = math.select(new float4((number)(0)), new float4((number)(1)), v);
        }

        /// <summary>Constructs a float4x4 matrix from a Unity.Mathematics.bool4x4 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.bool4x4 to convert to float4x4</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float4x4(Unity.Mathematics.bool4x4 v)
        {
            this.c0 = math.select(new float4((number)(0)), new float4((number)(1)), v.c0);
            this.c1 = math.select(new float4((number)(0)), new float4((number)(1)), v.c1);
            this.c2 = math.select(new float4((number)(0)), new float4((number)(1)), v.c2);
            this.c3 = math.select(new float4((number)(0)), new float4((number)(1)), v.c3);
        }

        /// <summary>Constructs a float4x4 matrix from a single int value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">int to convert to float4x4</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float4x4(int v)
        {
            this.c0 = (float4)v;
            this.c1 = (float4)v;
            this.c2 = (float4)v;
            this.c3 = (float4)v;
        }

        /// <summary>Constructs a float4x4 matrix from a Unity.Mathematics.int4x4 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.int4x4 to convert to float4x4</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float4x4(Unity.Mathematics.int4x4 v)
        {
            this.c0 = (float4)v.c0;
            this.c1 = (float4)v.c1;
            this.c2 = (float4)v.c2;
            this.c3 = (float4)v.c3;
        }

        /// <summary>Constructs a float4x4 matrix from a single uint value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">uint to convert to float4x4</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float4x4(uint v)
        {
            this.c0 = (float4)v;
            this.c1 = (float4)v;
            this.c2 = (float4)v;
            this.c3 = (float4)v;
        }

        /// <summary>Constructs a float4x4 matrix from a Unity.Mathematics.uint4x4 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.uint4x4 to convert to float4x4</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float4x4(Unity.Mathematics.uint4x4 v)
        {
            this.c0 = (float4)v.c0;
            this.c1 = (float4)v.c1;
            this.c2 = (float4)v.c2;
            this.c3 = (float4)v.c3;
        }

        /// <summary>Constructs a float4x4 matrix from a single float value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">float to convert to float4x4</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float4x4(float v)
        {
            this.c0 = (float4)v;
            this.c1 = (float4)v;
            this.c2 = (float4)v;
            this.c3 = (float4)v;
        }

        /// <summary>Constructs a float4x4 matrix from a Unity.Mathematics.float4x4 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.float4x4 to convert to float4x4</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float4x4(Unity.Mathematics.float4x4 v)
        {
            this.c0 = (float4)v.c0;
            this.c1 = (float4)v.c1;
            this.c2 = (float4)v.c2;
            this.c3 = (float4)v.c3;
        }

        /// <summary>Constructs a float4x4 matrix from a single double value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">double to convert to float4x4</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float4x4(double v)
        {
            this.c0 = (float4)v;
            this.c1 = (float4)v;
            this.c2 = (float4)v;
            this.c3 = (float4)v;
        }

        /// <summary>Constructs a float4x4 matrix from a Unity.Mathematics.double4x4 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.double4x4 to convert to float4x4</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float4x4(Unity.Mathematics.double4x4 v)
        {
            this.c0 = (float4)v.c0;
            this.c1 = (float4)v.c1;
            this.c2 = (float4)v.c2;
            this.c3 = (float4)v.c3;
        }


        /// <summary>Implicitly converts a single number value to a float4x4 matrix by assigning it to every component.</summary>
        /// <param name="v">number to convert to float4x4</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator float4x4(number v) { return new float4x4(v); }

        /// <summary>Explicitly converts a single bool value to a float4x4 matrix by converting it to number and assigning it to every component.</summary>
        /// <param name="v">bool to convert to float4x4</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator float4x4(bool v) { return new float4x4(v); }

        /// <summary>Explicitly converts a Unity.Mathematics.bool4x4 matrix to a float4x4 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.bool4x4 to convert to float4x4</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator float4x4(Unity.Mathematics.bool4x4 v) { return new float4x4(v); }

        /// <summary>Explicitly converts a single int value to a float4x4 matrix by converting it to number and assigning it to every component.</summary>
        /// <param name="v">int to convert to float4x4</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator float4x4(int v) { return new float4x4(v); }

        /// <summary>Explicitly converts a Unity.Mathematics.int4x4 matrix to a float4x4 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.int4x4 to convert to float4x4</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator float4x4(Unity.Mathematics.int4x4 v) { return new float4x4(v); }

        /// <summary>Explicitly converts a float4x4 matrix to a Unity.Mathematics.int4x4 matrix by componentwise conversion.</summary>
        /// <param name="v">float4x4 to convert to Unity.Mathematics.int4x4</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Unity.Mathematics.int4x4(float4x4 v) { return new Unity.Mathematics.int4x4((Unity.Mathematics.int4)v.c0, (Unity.Mathematics.int4)v.c1, (Unity.Mathematics.int4)v.c2, (Unity.Mathematics.int4)v.c3); }

        /// <summary>Explicitly converts a single uint value to a float4x4 matrix by converting it to number and assigning it to every component.</summary>
        /// <param name="v">uint to convert to float4x4</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator float4x4(uint v) { return new float4x4(v); }

        /// <summary>Explicitly converts a Unity.Mathematics.uint4x4 matrix to a float4x4 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.uint4x4 to convert to float4x4</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator float4x4(Unity.Mathematics.uint4x4 v) { return new float4x4(v); }

        /// <summary>Explicitly converts a single float value to a float4x4 matrix by converting it to number and assigning it to every component.</summary>
        /// <param name="v">float to convert to float4x4</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator float4x4(float v) { return new float4x4(v); }

        /// <summary>Explicitly converts a Unity.Mathematics.float4x4 matrix to a float4x4 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.float4x4 to convert to float4x4</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator float4x4(Unity.Mathematics.float4x4 v) { return new float4x4(v); }

        /// <summary>Explicitly converts a float4x4 matrix to a Unity.Mathematics.float4x4 matrix by componentwise conversion.</summary>
        /// <param name="v">float4x4 to convert to Unity.Mathematics.float4x4</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Unity.Mathematics.float4x4(float4x4 v) { return new Unity.Mathematics.float4x4((Unity.Mathematics.float4)v.c0, (Unity.Mathematics.float4)v.c1, (Unity.Mathematics.float4)v.c2, (Unity.Mathematics.float4)v.c3); }

        /// <summary>Explicitly converts a single double value to a float4x4 matrix by converting it to number and assigning it to every component.</summary>
        /// <param name="v">double to convert to float4x4</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator float4x4(double v) { return new float4x4(v); }

        /// <summary>Explicitly converts a Unity.Mathematics.double4x4 matrix to a float4x4 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.double4x4 to convert to float4x4</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator float4x4(Unity.Mathematics.double4x4 v) { return new float4x4(v); }

        /// <summary>Explicitly converts a float4x4 matrix to a Unity.Mathematics.double4x4 matrix by componentwise conversion.</summary>
        /// <param name="v">float4x4 to convert to Unity.Mathematics.double4x4</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Unity.Mathematics.double4x4(float4x4 v) { return new Unity.Mathematics.double4x4((Unity.Mathematics.double4)v.c0, (Unity.Mathematics.double4)v.c1, (Unity.Mathematics.double4)v.c2, (Unity.Mathematics.double4)v.c3); }


        /// <summary>Returns the result of a componentwise multiplication operation on two float4x4 matrices.</summary>
        /// <param name="lhs">Left hand side float4x4 to use to compute componentwise multiplication.</param>
        /// <param name="rhs">Right hand side float4x4 to use to compute componentwise multiplication.</param>
        /// <returns>float4x4 result of the componentwise multiplication.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator * (float4x4 lhs, float4x4 rhs) { return new float4x4 (lhs.c0 * rhs.c0, lhs.c1 * rhs.c1, lhs.c2 * rhs.c2, lhs.c3 * rhs.c3); }

        /// <summary>Returns the result of a componentwise multiplication operation on a float4x4 matrix and a number value.</summary>
        /// <param name="lhs">Left hand side float4x4 to use to compute componentwise multiplication.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise multiplication.</param>
        /// <returns>float4x4 result of the componentwise multiplication.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator * (float4x4 lhs, number rhs) { return new float4x4 (lhs.c0 * rhs, lhs.c1 * rhs, lhs.c2 * rhs, lhs.c3 * rhs); }

        /// <summary>Returns the result of a componentwise multiplication operation on a number value and a float4x4 matrix.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise multiplication.</param>
        /// <param name="rhs">Right hand side float4x4 to use to compute componentwise multiplication.</param>
        /// <returns>float4x4 result of the componentwise multiplication.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator * (number lhs, float4x4 rhs) { return new float4x4 (lhs * rhs.c0, lhs * rhs.c1, lhs * rhs.c2, lhs * rhs.c3); }


        /// <summary>Returns the result of a componentwise addition operation on two float4x4 matrices.</summary>
        /// <param name="lhs">Left hand side float4x4 to use to compute componentwise addition.</param>
        /// <param name="rhs">Right hand side float4x4 to use to compute componentwise addition.</param>
        /// <returns>float4x4 result of the componentwise addition.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator + (float4x4 lhs, float4x4 rhs) { return new float4x4 (lhs.c0 + rhs.c0, lhs.c1 + rhs.c1, lhs.c2 + rhs.c2, lhs.c3 + rhs.c3); }

        /// <summary>Returns the result of a componentwise addition operation on a float4x4 matrix and a number value.</summary>
        /// <param name="lhs">Left hand side float4x4 to use to compute componentwise addition.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise addition.</param>
        /// <returns>float4x4 result of the componentwise addition.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator + (float4x4 lhs, number rhs) { return new float4x4 (lhs.c0 + rhs, lhs.c1 + rhs, lhs.c2 + rhs, lhs.c3 + rhs); }

        /// <summary>Returns the result of a componentwise addition operation on a number value and a float4x4 matrix.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise addition.</param>
        /// <param name="rhs">Right hand side float4x4 to use to compute componentwise addition.</param>
        /// <returns>float4x4 result of the componentwise addition.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator + (number lhs, float4x4 rhs) { return new float4x4 (lhs + rhs.c0, lhs + rhs.c1, lhs + rhs.c2, lhs + rhs.c3); }


        /// <summary>Returns the result of a componentwise subtraction operation on two float4x4 matrices.</summary>
        /// <param name="lhs">Left hand side float4x4 to use to compute componentwise subtraction.</param>
        /// <param name="rhs">Right hand side float4x4 to use to compute componentwise subtraction.</param>
        /// <returns>float4x4 result of the componentwise subtraction.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator - (float4x4 lhs, float4x4 rhs) { return new float4x4 (lhs.c0 - rhs.c0, lhs.c1 - rhs.c1, lhs.c2 - rhs.c2, lhs.c3 - rhs.c3); }

        /// <summary>Returns the result of a componentwise subtraction operation on a float4x4 matrix and a number value.</summary>
        /// <param name="lhs">Left hand side float4x4 to use to compute componentwise subtraction.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise subtraction.</param>
        /// <returns>float4x4 result of the componentwise subtraction.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator - (float4x4 lhs, number rhs) { return new float4x4 (lhs.c0 - rhs, lhs.c1 - rhs, lhs.c2 - rhs, lhs.c3 - rhs); }

        /// <summary>Returns the result of a componentwise subtraction operation on a number value and a float4x4 matrix.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise subtraction.</param>
        /// <param name="rhs">Right hand side float4x4 to use to compute componentwise subtraction.</param>
        /// <returns>float4x4 result of the componentwise subtraction.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator - (number lhs, float4x4 rhs) { return new float4x4 (lhs - rhs.c0, lhs - rhs.c1, lhs - rhs.c2, lhs - rhs.c3); }


        /// <summary>Returns the result of a componentwise division operation on two float4x4 matrices.</summary>
        /// <param name="lhs">Left hand side float4x4 to use to compute componentwise division.</param>
        /// <param name="rhs">Right hand side float4x4 to use to compute componentwise division.</param>
        /// <returns>float4x4 result of the componentwise division.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator / (float4x4 lhs, float4x4 rhs) { return new float4x4 (lhs.c0 / rhs.c0, lhs.c1 / rhs.c1, lhs.c2 / rhs.c2, lhs.c3 / rhs.c3); }

        /// <summary>Returns the result of a componentwise division operation on a float4x4 matrix and a number value.</summary>
        /// <param name="lhs">Left hand side float4x4 to use to compute componentwise division.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise division.</param>
        /// <returns>float4x4 result of the componentwise division.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator / (float4x4 lhs, number rhs) { return new float4x4 (lhs.c0 / rhs, lhs.c1 / rhs, lhs.c2 / rhs, lhs.c3 / rhs); }

        /// <summary>Returns the result of a componentwise division operation on a number value and a float4x4 matrix.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise division.</param>
        /// <param name="rhs">Right hand side float4x4 to use to compute componentwise division.</param>
        /// <returns>float4x4 result of the componentwise division.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator / (number lhs, float4x4 rhs) { return new float4x4 (lhs / rhs.c0, lhs / rhs.c1, lhs / rhs.c2, lhs / rhs.c3); }


        /// <summary>Returns the result of a componentwise modulus operation on two float4x4 matrices.</summary>
        /// <param name="lhs">Left hand side float4x4 to use to compute componentwise modulus.</param>
        /// <param name="rhs">Right hand side float4x4 to use to compute componentwise modulus.</param>
        /// <returns>float4x4 result of the componentwise modulus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator % (float4x4 lhs, float4x4 rhs) { return new float4x4 (lhs.c0 % rhs.c0, lhs.c1 % rhs.c1, lhs.c2 % rhs.c2, lhs.c3 % rhs.c3); }

        /// <summary>Returns the result of a componentwise modulus operation on a float4x4 matrix and a number value.</summary>
        /// <param name="lhs">Left hand side float4x4 to use to compute componentwise modulus.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise modulus.</param>
        /// <returns>float4x4 result of the componentwise modulus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator % (float4x4 lhs, number rhs) { return new float4x4 (lhs.c0 % rhs, lhs.c1 % rhs, lhs.c2 % rhs, lhs.c3 % rhs); }

        /// <summary>Returns the result of a componentwise modulus operation on a number value and a float4x4 matrix.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise modulus.</param>
        /// <param name="rhs">Right hand side float4x4 to use to compute componentwise modulus.</param>
        /// <returns>float4x4 result of the componentwise modulus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator % (number lhs, float4x4 rhs) { return new float4x4 (lhs % rhs.c0, lhs % rhs.c1, lhs % rhs.c2, lhs % rhs.c3); }


        /// <summary>Returns the result of a componentwise increment operation on a float4x4 matrix.</summary>
        /// <param name="val">Value to use when computing the componentwise increment.</param>
        /// <returns>float4x4 result of the componentwise increment.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator ++ (float4x4 val) { return new float4x4 (++val.c0, ++val.c1, ++val.c2, ++val.c3); }


        /// <summary>Returns the result of a componentwise decrement operation on a float4x4 matrix.</summary>
        /// <param name="val">Value to use when computing the componentwise decrement.</param>
        /// <returns>float4x4 result of the componentwise decrement.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator -- (float4x4 val) { return new float4x4 (--val.c0, --val.c1, --val.c2, --val.c3); }


        /// <summary>Returns the result of a componentwise less than operation on two float4x4 matrices.</summary>
        /// <param name="lhs">Left hand side float4x4 to use to compute componentwise less than.</param>
        /// <param name="rhs">Right hand side float4x4 to use to compute componentwise less than.</param>
        /// <returns>Unity.Mathematics.bool4x4 result of the componentwise less than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool4x4 operator < (float4x4 lhs, float4x4 rhs) { return new Unity.Mathematics.bool4x4 (lhs.c0 < rhs.c0, lhs.c1 < rhs.c1, lhs.c2 < rhs.c2, lhs.c3 < rhs.c3); }

        /// <summary>Returns the result of a componentwise less than operation on a float4x4 matrix and a number value.</summary>
        /// <param name="lhs">Left hand side float4x4 to use to compute componentwise less than.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise less than.</param>
        /// <returns>Unity.Mathematics.bool4x4 result of the componentwise less than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool4x4 operator < (float4x4 lhs, number rhs) { return new Unity.Mathematics.bool4x4 (lhs.c0 < rhs, lhs.c1 < rhs, lhs.c2 < rhs, lhs.c3 < rhs); }

        /// <summary>Returns the result of a componentwise less than operation on a number value and a float4x4 matrix.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise less than.</param>
        /// <param name="rhs">Right hand side float4x4 to use to compute componentwise less than.</param>
        /// <returns>Unity.Mathematics.bool4x4 result of the componentwise less than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool4x4 operator < (number lhs, float4x4 rhs) { return new Unity.Mathematics.bool4x4 (lhs < rhs.c0, lhs < rhs.c1, lhs < rhs.c2, lhs < rhs.c3); }


        /// <summary>Returns the result of a componentwise less or equal operation on two float4x4 matrices.</summary>
        /// <param name="lhs">Left hand side float4x4 to use to compute componentwise less or equal.</param>
        /// <param name="rhs">Right hand side float4x4 to use to compute componentwise less or equal.</param>
        /// <returns>Unity.Mathematics.bool4x4 result of the componentwise less or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool4x4 operator <= (float4x4 lhs, float4x4 rhs) { return new Unity.Mathematics.bool4x4 (lhs.c0 <= rhs.c0, lhs.c1 <= rhs.c1, lhs.c2 <= rhs.c2, lhs.c3 <= rhs.c3); }

        /// <summary>Returns the result of a componentwise less or equal operation on a float4x4 matrix and a number value.</summary>
        /// <param name="lhs">Left hand side float4x4 to use to compute componentwise less or equal.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise less or equal.</param>
        /// <returns>Unity.Mathematics.bool4x4 result of the componentwise less or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool4x4 operator <= (float4x4 lhs, number rhs) { return new Unity.Mathematics.bool4x4 (lhs.c0 <= rhs, lhs.c1 <= rhs, lhs.c2 <= rhs, lhs.c3 <= rhs); }

        /// <summary>Returns the result of a componentwise less or equal operation on a number value and a float4x4 matrix.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise less or equal.</param>
        /// <param name="rhs">Right hand side float4x4 to use to compute componentwise less or equal.</param>
        /// <returns>Unity.Mathematics.bool4x4 result of the componentwise less or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool4x4 operator <= (number lhs, float4x4 rhs) { return new Unity.Mathematics.bool4x4 (lhs <= rhs.c0, lhs <= rhs.c1, lhs <= rhs.c2, lhs <= rhs.c3); }


        /// <summary>Returns the result of a componentwise greater than operation on two float4x4 matrices.</summary>
        /// <param name="lhs">Left hand side float4x4 to use to compute componentwise greater than.</param>
        /// <param name="rhs">Right hand side float4x4 to use to compute componentwise greater than.</param>
        /// <returns>Unity.Mathematics.bool4x4 result of the componentwise greater than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool4x4 operator > (float4x4 lhs, float4x4 rhs) { return new Unity.Mathematics.bool4x4 (lhs.c0 > rhs.c0, lhs.c1 > rhs.c1, lhs.c2 > rhs.c2, lhs.c3 > rhs.c3); }

        /// <summary>Returns the result of a componentwise greater than operation on a float4x4 matrix and a number value.</summary>
        /// <param name="lhs">Left hand side float4x4 to use to compute componentwise greater than.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise greater than.</param>
        /// <returns>Unity.Mathematics.bool4x4 result of the componentwise greater than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool4x4 operator > (float4x4 lhs, number rhs) { return new Unity.Mathematics.bool4x4 (lhs.c0 > rhs, lhs.c1 > rhs, lhs.c2 > rhs, lhs.c3 > rhs); }

        /// <summary>Returns the result of a componentwise greater than operation on a number value and a float4x4 matrix.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise greater than.</param>
        /// <param name="rhs">Right hand side float4x4 to use to compute componentwise greater than.</param>
        /// <returns>Unity.Mathematics.bool4x4 result of the componentwise greater than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool4x4 operator > (number lhs, float4x4 rhs) { return new Unity.Mathematics.bool4x4 (lhs > rhs.c0, lhs > rhs.c1, lhs > rhs.c2, lhs > rhs.c3); }


        /// <summary>Returns the result of a componentwise greater or equal operation on two float4x4 matrices.</summary>
        /// <param name="lhs">Left hand side float4x4 to use to compute componentwise greater or equal.</param>
        /// <param name="rhs">Right hand side float4x4 to use to compute componentwise greater or equal.</param>
        /// <returns>Unity.Mathematics.bool4x4 result of the componentwise greater or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool4x4 operator >= (float4x4 lhs, float4x4 rhs) { return new Unity.Mathematics.bool4x4 (lhs.c0 >= rhs.c0, lhs.c1 >= rhs.c1, lhs.c2 >= rhs.c2, lhs.c3 >= rhs.c3); }

        /// <summary>Returns the result of a componentwise greater or equal operation on a float4x4 matrix and a number value.</summary>
        /// <param name="lhs">Left hand side float4x4 to use to compute componentwise greater or equal.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise greater or equal.</param>
        /// <returns>Unity.Mathematics.bool4x4 result of the componentwise greater or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool4x4 operator >= (float4x4 lhs, number rhs) { return new Unity.Mathematics.bool4x4 (lhs.c0 >= rhs, lhs.c1 >= rhs, lhs.c2 >= rhs, lhs.c3 >= rhs); }

        /// <summary>Returns the result of a componentwise greater or equal operation on a number value and a float4x4 matrix.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise greater or equal.</param>
        /// <param name="rhs">Right hand side float4x4 to use to compute componentwise greater or equal.</param>
        /// <returns>Unity.Mathematics.bool4x4 result of the componentwise greater or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool4x4 operator >= (number lhs, float4x4 rhs) { return new Unity.Mathematics.bool4x4 (lhs >= rhs.c0, lhs >= rhs.c1, lhs >= rhs.c2, lhs >= rhs.c3); }


        /// <summary>Returns the result of a componentwise unary minus operation on a float4x4 matrix.</summary>
        /// <param name="val">Value to use when computing the componentwise unary minus.</param>
        /// <returns>float4x4 result of the componentwise unary minus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator - (float4x4 val) { return new float4x4 (-val.c0, -val.c1, -val.c2, -val.c3); }


        /// <summary>Returns the result of a componentwise unary plus operation on a float4x4 matrix.</summary>
        /// <param name="val">Value to use when computing the componentwise unary plus.</param>
        /// <returns>float4x4 result of the componentwise unary plus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator + (float4x4 val) { return new float4x4 (+val.c0, +val.c1, +val.c2, +val.c3); }


        /// <summary>Returns the result of a componentwise equality operation on two float4x4 matrices.</summary>
        /// <param name="lhs">Left hand side float4x4 to use to compute componentwise equality.</param>
        /// <param name="rhs">Right hand side float4x4 to use to compute componentwise equality.</param>
        /// <returns>Unity.Mathematics.bool4x4 result of the componentwise equality.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool4x4 operator == (float4x4 lhs, float4x4 rhs) { return new Unity.Mathematics.bool4x4 (lhs.c0 == rhs.c0, lhs.c1 == rhs.c1, lhs.c2 == rhs.c2, lhs.c3 == rhs.c3); }

        /// <summary>Returns the result of a componentwise equality operation on a float4x4 matrix and a number value.</summary>
        /// <param name="lhs">Left hand side float4x4 to use to compute componentwise equality.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise equality.</param>
        /// <returns>Unity.Mathematics.bool4x4 result of the componentwise equality.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool4x4 operator == (float4x4 lhs, number rhs) { return new Unity.Mathematics.bool4x4 (lhs.c0 == rhs, lhs.c1 == rhs, lhs.c2 == rhs, lhs.c3 == rhs); }

        /// <summary>Returns the result of a componentwise equality operation on a number value and a float4x4 matrix.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise equality.</param>
        /// <param name="rhs">Right hand side float4x4 to use to compute componentwise equality.</param>
        /// <returns>Unity.Mathematics.bool4x4 result of the componentwise equality.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool4x4 operator == (number lhs, float4x4 rhs) { return new Unity.Mathematics.bool4x4 (lhs == rhs.c0, lhs == rhs.c1, lhs == rhs.c2, lhs == rhs.c3); }


        /// <summary>Returns the result of a componentwise not equal operation on two float4x4 matrices.</summary>
        /// <param name="lhs">Left hand side float4x4 to use to compute componentwise not equal.</param>
        /// <param name="rhs">Right hand side float4x4 to use to compute componentwise not equal.</param>
        /// <returns>Unity.Mathematics.bool4x4 result of the componentwise not equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool4x4 operator != (float4x4 lhs, float4x4 rhs) { return new Unity.Mathematics.bool4x4 (lhs.c0 != rhs.c0, lhs.c1 != rhs.c1, lhs.c2 != rhs.c2, lhs.c3 != rhs.c3); }

        /// <summary>Returns the result of a componentwise not equal operation on a float4x4 matrix and a number value.</summary>
        /// <param name="lhs">Left hand side float4x4 to use to compute componentwise not equal.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise not equal.</param>
        /// <returns>Unity.Mathematics.bool4x4 result of the componentwise not equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool4x4 operator != (float4x4 lhs, number rhs) { return new Unity.Mathematics.bool4x4 (lhs.c0 != rhs, lhs.c1 != rhs, lhs.c2 != rhs, lhs.c3 != rhs); }

        /// <summary>Returns the result of a componentwise not equal operation on a number value and a float4x4 matrix.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise not equal.</param>
        /// <param name="rhs">Right hand side float4x4 to use to compute componentwise not equal.</param>
        /// <returns>Unity.Mathematics.bool4x4 result of the componentwise not equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool4x4 operator != (number lhs, float4x4 rhs) { return new Unity.Mathematics.bool4x4 (lhs != rhs.c0, lhs != rhs.c1, lhs != rhs.c2, lhs != rhs.c3); }


        /// <summary>Returns the result of a componentwise bitwise and operation on two float4x4 matrices.</summary>
        /// <param name="lhs">Left hand side float4x4 to use to compute componentwise bitwise and.</param>
        /// <param name="rhs">Right hand side float4x4 to use to compute componentwise bitwise and.</param>
        /// <returns>float4x4 result of the componentwise bitwise and.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator & (float4x4 lhs, float4x4 rhs) { return new float4x4 (lhs.c0 & rhs.c0, lhs.c1 & rhs.c1, lhs.c2 & rhs.c2, lhs.c3 & rhs.c3); }

        /// <summary>Returns the result of a componentwise bitwise and operation on a float4x4 matrix and a number value.</summary>
        /// <param name="lhs">Left hand side float4x4 to use to compute componentwise bitwise and.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise bitwise and.</param>
        /// <returns>float4x4 result of the componentwise bitwise and.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator & (float4x4 lhs, number rhs) { return new float4x4 (lhs.c0 & rhs, lhs.c1 & rhs, lhs.c2 & rhs, lhs.c3 & rhs); }

        /// <summary>Returns the result of a componentwise bitwise and operation on a number value and a float4x4 matrix.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise bitwise and.</param>
        /// <param name="rhs">Right hand side float4x4 to use to compute componentwise bitwise and.</param>
        /// <returns>float4x4 result of the componentwise bitwise and.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator & (number lhs, float4x4 rhs) { return new float4x4 (lhs & rhs.c0, lhs & rhs.c1, lhs & rhs.c2, lhs & rhs.c3); }


        /// <summary>Returns the result of a componentwise bitwise or operation on two float4x4 matrices.</summary>
        /// <param name="lhs">Left hand side float4x4 to use to compute componentwise bitwise or.</param>
        /// <param name="rhs">Right hand side float4x4 to use to compute componentwise bitwise or.</param>
        /// <returns>float4x4 result of the componentwise bitwise or.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator | (float4x4 lhs, float4x4 rhs) { return new float4x4 (lhs.c0 | rhs.c0, lhs.c1 | rhs.c1, lhs.c2 | rhs.c2, lhs.c3 | rhs.c3); }

        /// <summary>Returns the result of a componentwise bitwise or operation on a float4x4 matrix and a number value.</summary>
        /// <param name="lhs">Left hand side float4x4 to use to compute componentwise bitwise or.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise bitwise or.</param>
        /// <returns>float4x4 result of the componentwise bitwise or.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator | (float4x4 lhs, number rhs) { return new float4x4 (lhs.c0 | rhs, lhs.c1 | rhs, lhs.c2 | rhs, lhs.c3 | rhs); }

        /// <summary>Returns the result of a componentwise bitwise or operation on a number value and a float4x4 matrix.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise bitwise or.</param>
        /// <param name="rhs">Right hand side float4x4 to use to compute componentwise bitwise or.</param>
        /// <returns>float4x4 result of the componentwise bitwise or.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator | (number lhs, float4x4 rhs) { return new float4x4 (lhs | rhs.c0, lhs | rhs.c1, lhs | rhs.c2, lhs | rhs.c3); }


        /// <summary>Returns the result of a componentwise bitwise exclusive or operation on two float4x4 matrices.</summary>
        /// <param name="lhs">Left hand side float4x4 to use to compute componentwise bitwise exclusive or.</param>
        /// <param name="rhs">Right hand side float4x4 to use to compute componentwise bitwise exclusive or.</param>
        /// <returns>float4x4 result of the componentwise bitwise exclusive or.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator ^ (float4x4 lhs, float4x4 rhs) { return new float4x4 (lhs.c0 ^ rhs.c0, lhs.c1 ^ rhs.c1, lhs.c2 ^ rhs.c2, lhs.c3 ^ rhs.c3); }

        /// <summary>Returns the result of a componentwise bitwise exclusive or operation on a float4x4 matrix and a number value.</summary>
        /// <param name="lhs">Left hand side float4x4 to use to compute componentwise bitwise exclusive or.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise bitwise exclusive or.</param>
        /// <returns>float4x4 result of the componentwise bitwise exclusive or.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator ^ (float4x4 lhs, number rhs) { return new float4x4 (lhs.c0 ^ rhs, lhs.c1 ^ rhs, lhs.c2 ^ rhs, lhs.c3 ^ rhs); }

        /// <summary>Returns the result of a componentwise bitwise exclusive or operation on a number value and a float4x4 matrix.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise bitwise exclusive or.</param>
        /// <param name="rhs">Right hand side float4x4 to use to compute componentwise bitwise exclusive or.</param>
        /// <returns>float4x4 result of the componentwise bitwise exclusive or.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator ^ (number lhs, float4x4 rhs) { return new float4x4 (lhs ^ rhs.c0, lhs ^ rhs.c1, lhs ^ rhs.c2, lhs ^ rhs.c3); }


        /// <summary>Returns the result of a componentwise bitwise negation operation on a float4x4 matrix.</summary>
        /// <param name="value">the float4x4 value to bitwise negation operation.</param>
        /// <returns>float4x4 result of the componentwise bitwise negation.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 operator ~ (float4x4 value) { return new float4x4 (~value.c0, ~value.c1, ~value.c2, ~value.c3); }


        /// <summary>Returns the float4 element at a specified index.</summary>
        unsafe public ref float4 this[int index]
        {
            get
            {
#if ENABLE_UNITY_COLLECTIONS_CHECKS
                if ((uint)index >= 4)
                    throw new System.ArgumentException("index must be between[0...3]");
#endif
                fixed (float4x4* array = &this) { return ref ((float4*)array)[index]; }
            }
        }

        /// <summary>Returns true if the float4x4 is equal to a given float4x4, false otherwise.</summary>
        /// <param name="rhs">Right hand side argument to compare equality with.</param>
        /// <returns>The result of the equality comparison.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(float4x4 rhs) { return c0.Equals(rhs.c0) && c1.Equals(rhs.c1) && c2.Equals(rhs.c2) && c3.Equals(rhs.c3); }

        /// <summary>Returns true if the float4x4 is equal to a given float4x4, false otherwise.</summary>
        /// <param name="o">Right hand side argument to compare equality with.</param>
        /// <returns>The result of the equality comparison.</returns>
        public override bool Equals(object o) { return o is float4x4 converted && Equals(converted); }


        /// <summary>Returns a hash code for the float4x4.</summary>
        /// <returns>The computed hash code.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override int GetHashCode() { return (int)math.hash(this); }


        /// <summary>Returns a string representation of the float4x4.</summary>
        /// <returns>String representation of the value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override string ToString()
        {
            return string.Format("float4x4({0}, {1}, {2}, {3},  {4}, {5}, {6}, {7},  {8}, {9}, {10}, {11},  {12}, {13}, {14}, {15})", c0.x, c1.x, c2.x, c3.x, c0.y, c1.y, c2.y, c3.y, c0.z, c1.z, c2.z, c3.z, c0.w, c1.w, c2.w, c3.w);
        }

        /// <summary>Returns a string representation of the float4x4 using a specified format and culture-specific format information.</summary>
        /// <param name="format">Format string to use during string formatting.</param>
        /// <param name="formatProvider">Format provider to use during string formatting.</param>
        /// <returns>String representation of the value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return string.Format("float4x4({0}, {1}, {2}, {3},  {4}, {5}, {6}, {7},  {8}, {9}, {10}, {11},  {12}, {13}, {14}, {15})", c0.x.ToString(format, formatProvider), c1.x.ToString(format, formatProvider), c2.x.ToString(format, formatProvider), c3.x.ToString(format, formatProvider), c0.y.ToString(format, formatProvider), c1.y.ToString(format, formatProvider), c2.y.ToString(format, formatProvider), c3.y.ToString(format, formatProvider), c0.z.ToString(format, formatProvider), c1.z.ToString(format, formatProvider), c2.z.ToString(format, formatProvider), c3.z.ToString(format, formatProvider), c0.w.ToString(format, formatProvider), c1.w.ToString(format, formatProvider), c2.w.ToString(format, formatProvider), c3.w.ToString(format, formatProvider));
        }

    }

    public static partial class math
    {
        /// <summary>Returns a float4x4 matrix constructed from four float4 vectors.</summary>
        /// <param name="c0">The matrix column c0 will be set to this value.</param>
        /// <param name="c1">The matrix column c1 will be set to this value.</param>
        /// <param name="c2">The matrix column c2 will be set to this value.</param>
        /// <param name="c3">The matrix column c3 will be set to this value.</param>
        /// <returns>float4x4 constructed from arguments.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 float4x4(float4 c0, float4 c1, float4 c2, float4 c3) { return new float4x4(c0, c1, c2, c3); }

        /// <summary>Returns a float4x4 matrix constructed from from 16 number values given in row-major order.</summary>
        /// <param name="m00">The matrix at row 0, column 0 will be set to this value.</param>
        /// <param name="m01">The matrix at row 0, column 1 will be set to this value.</param>
        /// <param name="m02">The matrix at row 0, column 2 will be set to this value.</param>
        /// <param name="m03">The matrix at row 0, column 3 will be set to this value.</param>
        /// <param name="m10">The matrix at row 1, column 0 will be set to this value.</param>
        /// <param name="m11">The matrix at row 1, column 1 will be set to this value.</param>
        /// <param name="m12">The matrix at row 1, column 2 will be set to this value.</param>
        /// <param name="m13">The matrix at row 1, column 3 will be set to this value.</param>
        /// <param name="m20">The matrix at row 2, column 0 will be set to this value.</param>
        /// <param name="m21">The matrix at row 2, column 1 will be set to this value.</param>
        /// <param name="m22">The matrix at row 2, column 2 will be set to this value.</param>
        /// <param name="m23">The matrix at row 2, column 3 will be set to this value.</param>
        /// <param name="m30">The matrix at row 3, column 0 will be set to this value.</param>
        /// <param name="m31">The matrix at row 3, column 1 will be set to this value.</param>
        /// <param name="m32">The matrix at row 3, column 2 will be set to this value.</param>
        /// <param name="m33">The matrix at row 3, column 3 will be set to this value.</param>
        /// <returns>float4x4 constructed from arguments.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 float4x4(number m00, number m01, number m02, number m03,
                                        number m10, number m11, number m12, number m13,
                                        number m20, number m21, number m22, number m23,
                                        number m30, number m31, number m32, number m33)
        {
            return new float4x4(m00, m01, m02, m03,
                                m10, m11, m12, m13,
                                m20, m21, m22, m23,
                                m30, m31, m32, m33);
        }

        /// <summary>Returns a float4x4 matrix constructed from a single number value by assigning it to every component.</summary>
        /// <param name="v">number to convert to float4x4</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 float4x4(number v) { return new float4x4(v); }

        /// <summary>Returns a float4x4 matrix constructed from a single bool value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">bool to convert to float4x4</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 float4x4(bool v) { return new float4x4(v); }

        /// <summary>Return a float4x4 matrix constructed from a Unity.Mathematics.bool4x4 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.bool4x4 to convert to float4x4</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 float4x4(Unity.Mathematics.bool4x4 v) { return new float4x4(v); }

        /// <summary>Returns a float4x4 matrix constructed from a single int value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">int to convert to float4x4</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 float4x4(int v) { return new float4x4(v); }

        /// <summary>Return a float4x4 matrix constructed from a Unity.Mathematics.int4x4 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.int4x4 to convert to float4x4</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 float4x4(Unity.Mathematics.int4x4 v) { return new float4x4(v); }

        /// <summary>Returns a float4x4 matrix constructed from a single uint value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">uint to convert to float4x4</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 float4x4(uint v) { return new float4x4(v); }

        /// <summary>Return a float4x4 matrix constructed from a Unity.Mathematics.uint4x4 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.uint4x4 to convert to float4x4</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 float4x4(Unity.Mathematics.uint4x4 v) { return new float4x4(v); }

        /// <summary>Returns a float4x4 matrix constructed from a single float value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">float to convert to float4x4</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 float4x4(float v) { return new float4x4(v); }

        /// <summary>Return a float4x4 matrix constructed from a Unity.Mathematics.float4x4 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.float4x4 to convert to float4x4</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 float4x4(Unity.Mathematics.float4x4 v) { return new float4x4(v); }

        /// <summary>Returns a float4x4 matrix constructed from a single double value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">double to convert to float4x4</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 float4x4(double v) { return new float4x4(v); }

        /// <summary>Return a float4x4 matrix constructed from a Unity.Mathematics.double4x4 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.double4x4 to convert to float4x4</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 float4x4(Unity.Mathematics.double4x4 v) { return new float4x4(v); }

        /// <summary>Return the result of rotating a float3 vector by a float4x4 matrix</summary>
        /// <param name ="a">Left hand side matrix argument that specifies the rotation.</param>
        /// <param name ="b">Right hand side vector argument to be rotated.</param>
        /// <returns>The rotated vector.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float3 rotate(float4x4 a, float3 b)
        {
            return (a.c0 * b.x + a.c1 * b.y + a.c2 * b.z).xyz;
        }

        /// <summary>Return the result of transforming a float3 point by a float4x4 matrix</summary>
        /// <param name ="a">Left hand side matrix argument that specifies the transformation.</param>
        /// <param name ="b">Right hand side point argument to be transformed.</param>
        /// <returns>The transformed point.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float3 transform(float4x4 a, float3 b)
        {
            return (a.c0 * b.x + a.c1 * b.y + a.c2 * b.z + a.c3).xyz;
        }

        /// <summary>Return the float4x4 transpose of a float4x4 matrix.</summary>
        /// <param name="v">Value to transpose.</param>
        /// <returns>Transposed value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float4x4 transpose(float4x4 v)
        {
            return float4x4(
                v.c0.x, v.c0.y, v.c0.z, v.c0.w,
                v.c1.x, v.c1.y, v.c1.z, v.c1.w,
                v.c2.x, v.c2.y, v.c2.z, v.c2.w,
                v.c3.x, v.c3.y, v.c3.z, v.c3.w);
        }

        /// <summary>Returns a uint hash code of a float4x4 matrix.</summary>
        /// <param name="v">Matrix value to hash.</param>
        /// <returns>uint hash of the argument.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint hash(float4x4 v)
        {
            return Unity.Mathematics.math.csum(asuint(v.c0) * new Unity.Mathematics.uint4(0x48125549u, 0xEEE2123Bu, 0xE3AD9FE5u, 0xCE1CF8BFu) +
                        asuint(v.c1) * new Unity.Mathematics.uint4(0x7BE39F3Bu, 0xFAB9913Fu, 0xB4501269u, 0xE04B89FDu) +
                        asuint(v.c2) * new Unity.Mathematics.uint4(0xDB3DE101u, 0x7B6D1B4Bu, 0x58399E77u, 0x5EAC29C9u) +
                        asuint(v.c3) * new Unity.Mathematics.uint4(0xFC6014F9u, 0x6BF6693Fu, 0x9D1B1D9Bu, 0xF842F5C1u)) + 0xA47EC335u;
        }

        /// <summary>
        /// Returns a Unity.Mathematics.uint4 vector hash code of a float4x4 matrix.
        /// When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash
        /// that are only reduced to a narrow uint hash at the very end instead of at every step.
        /// </summary>
        /// <param name="v">Matrix value to hash.</param>
        /// <returns>Unity.Mathematics.uint4 hash of the argument.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.uint4 hashwide(float4x4 v)
        {
            return (asuint(v.c0) * new Unity.Mathematics.uint4(0xA477DF57u, 0xC4B1493Fu, 0xBA0966D3u, 0xAFBEE253u) +
                    asuint(v.c1) * new Unity.Mathematics.uint4(0x5B419C01u, 0x515D90F5u, 0xEC9F68F3u, 0xF9EA92D5u) +
                    asuint(v.c2) * new Unity.Mathematics.uint4(0xC2FAFCB9u, 0x616E9CA1u, 0xC5C5394Bu, 0xCAE78587u) +
                    asuint(v.c3) * new Unity.Mathematics.uint4(0x7A1541C9u, 0xF83BD927u, 0x6A243BCBu, 0x509B84C9u)) + 0x91D13847u;
        }

    }
}
