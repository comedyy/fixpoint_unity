//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. To update the generation of this file, modify and re-run Unity.Mathematics.CodeGen.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;
using ShuffleComponent = Unity.Mathematics.math.ShuffleComponent;

#pragma warning disable 0660, 0661

namespace Nt.Deterministics
{
    /// <summary>A 2x3 matrix of numbers.</summary>
    [System.Serializable]
    public partial struct float2x3 : System.IEquatable<float2x3>, IFormattable
    {
        /// <summary>Column 0 of the matrix.</summary>
        public float2 c0;
        /// <summary>Column 1 of the matrix.</summary>
        public float2 c1;
        /// <summary>Column 2 of the matrix.</summary>
        public float2 c2;

        /// <summary>float2x3 zero value.</summary>
        public static readonly float2x3 zero;

        /// <summary>Constructs a float2x3 matrix from three float2 vectors.</summary>
        /// <param name="c0">The matrix column c0 will be set to this value.</param>
        /// <param name="c1">The matrix column c1 will be set to this value.</param>
        /// <param name="c2">The matrix column c2 will be set to this value.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float2x3(float2 c0, float2 c1, float2 c2)
        {
            this.c0 = c0;
            this.c1 = c1;
            this.c2 = c2;
        }

        /// <summary>Constructs a float2x3 matrix from 6 number values given in row-major order.</summary>
        /// <param name="m00">The matrix at row 0, column 0 will be set to this value.</param>
        /// <param name="m01">The matrix at row 0, column 1 will be set to this value.</param>
        /// <param name="m02">The matrix at row 0, column 2 will be set to this value.</param>
        /// <param name="m10">The matrix at row 1, column 0 will be set to this value.</param>
        /// <param name="m11">The matrix at row 1, column 1 will be set to this value.</param>
        /// <param name="m12">The matrix at row 1, column 2 will be set to this value.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float2x3(number m00, number m01, number m02,
                        number m10, number m11, number m12)
        {
            this.c0 = new float2(m00, m10);
            this.c1 = new float2(m01, m11);
            this.c2 = new float2(m02, m12);
        }

        /// <summary>Constructs a float2x3 matrix from a single number value by assigning it to every component.</summary>
        /// <param name="v">number to convert to float2x3</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float2x3(number v)
        {
            this.c0 = v;
            this.c1 = v;
            this.c2 = v;
        }

        /// <summary>Constructs a float2x3 matrix from a single bool value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">bool to convert to float2x3</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float2x3(bool v)
        {
            this.c0 = math.select(new float2((number)(0)), new float2((number)(1)), v);
            this.c1 = math.select(new float2((number)(0)), new float2((number)(1)), v);
            this.c2 = math.select(new float2((number)(0)), new float2((number)(1)), v);
        }

        /// <summary>Constructs a float2x3 matrix from a Unity.Mathematics.bool2x3 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.bool2x3 to convert to float2x3</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float2x3(Unity.Mathematics.bool2x3 v)
        {
            this.c0 = math.select(new float2((number)(0)), new float2((number)(1)), v.c0);
            this.c1 = math.select(new float2((number)(0)), new float2((number)(1)), v.c1);
            this.c2 = math.select(new float2((number)(0)), new float2((number)(1)), v.c2);
        }

        /// <summary>Constructs a float2x3 matrix from a single int value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">int to convert to float2x3</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float2x3(int v)
        {
            this.c0 = (float2)v;
            this.c1 = (float2)v;
            this.c2 = (float2)v;
        }

        /// <summary>Constructs a float2x3 matrix from a Unity.Mathematics.int2x3 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.int2x3 to convert to float2x3</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float2x3(Unity.Mathematics.int2x3 v)
        {
            this.c0 = (float2)v.c0;
            this.c1 = (float2)v.c1;
            this.c2 = (float2)v.c2;
        }

        /// <summary>Constructs a float2x3 matrix from a single uint value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">uint to convert to float2x3</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float2x3(uint v)
        {
            this.c0 = (float2)v;
            this.c1 = (float2)v;
            this.c2 = (float2)v;
        }

        /// <summary>Constructs a float2x3 matrix from a Unity.Mathematics.uint2x3 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.uint2x3 to convert to float2x3</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float2x3(Unity.Mathematics.uint2x3 v)
        {
            this.c0 = (float2)v.c0;
            this.c1 = (float2)v.c1;
            this.c2 = (float2)v.c2;
        }

        /// <summary>Constructs a float2x3 matrix from a single float value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">float to convert to float2x3</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float2x3(float v)
        {
            this.c0 = (float2)v;
            this.c1 = (float2)v;
            this.c2 = (float2)v;
        }

        /// <summary>Constructs a float2x3 matrix from a Unity.Mathematics.float2x3 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.float2x3 to convert to float2x3</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float2x3(Unity.Mathematics.float2x3 v)
        {
            this.c0 = (float2)v.c0;
            this.c1 = (float2)v.c1;
            this.c2 = (float2)v.c2;
        }

        /// <summary>Constructs a float2x3 matrix from a single double value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">double to convert to float2x3</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float2x3(double v)
        {
            this.c0 = (float2)v;
            this.c1 = (float2)v;
            this.c2 = (float2)v;
        }

        /// <summary>Constructs a float2x3 matrix from a Unity.Mathematics.double2x3 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.double2x3 to convert to float2x3</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float2x3(Unity.Mathematics.double2x3 v)
        {
            this.c0 = (float2)v.c0;
            this.c1 = (float2)v.c1;
            this.c2 = (float2)v.c2;
        }


        /// <summary>Implicitly converts a single number value to a float2x3 matrix by assigning it to every component.</summary>
        /// <param name="v">number to convert to float2x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator float2x3(number v) { return new float2x3(v); }

        /// <summary>Explicitly converts a single bool value to a float2x3 matrix by converting it to number and assigning it to every component.</summary>
        /// <param name="v">bool to convert to float2x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator float2x3(bool v) { return new float2x3(v); }

        /// <summary>Explicitly converts a Unity.Mathematics.bool2x3 matrix to a float2x3 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.bool2x3 to convert to float2x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator float2x3(Unity.Mathematics.bool2x3 v) { return new float2x3(v); }

        /// <summary>Explicitly converts a single int value to a float2x3 matrix by converting it to number and assigning it to every component.</summary>
        /// <param name="v">int to convert to float2x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator float2x3(int v) { return new float2x3(v); }

        /// <summary>Explicitly converts a Unity.Mathematics.int2x3 matrix to a float2x3 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.int2x3 to convert to float2x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator float2x3(Unity.Mathematics.int2x3 v) { return new float2x3(v); }

        /// <summary>Explicitly converts a float2x3 matrix to a Unity.Mathematics.int2x3 matrix by componentwise conversion.</summary>
        /// <param name="v">float2x3 to convert to Unity.Mathematics.int2x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Unity.Mathematics.int2x3(float2x3 v) { return new Unity.Mathematics.int2x3((Unity.Mathematics.int2)v.c0, (Unity.Mathematics.int2)v.c1, (Unity.Mathematics.int2)v.c2); }

        /// <summary>Explicitly converts a single uint value to a float2x3 matrix by converting it to number and assigning it to every component.</summary>
        /// <param name="v">uint to convert to float2x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator float2x3(uint v) { return new float2x3(v); }

        /// <summary>Explicitly converts a Unity.Mathematics.uint2x3 matrix to a float2x3 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.uint2x3 to convert to float2x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator float2x3(Unity.Mathematics.uint2x3 v) { return new float2x3(v); }

        /// <summary>Explicitly converts a single float value to a float2x3 matrix by converting it to number and assigning it to every component.</summary>
        /// <param name="v">float to convert to float2x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator float2x3(float v) { return new float2x3(v); }

        /// <summary>Explicitly converts a Unity.Mathematics.float2x3 matrix to a float2x3 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.float2x3 to convert to float2x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator float2x3(Unity.Mathematics.float2x3 v) { return new float2x3(v); }

        /// <summary>Explicitly converts a float2x3 matrix to a Unity.Mathematics.float2x3 matrix by componentwise conversion.</summary>
        /// <param name="v">float2x3 to convert to Unity.Mathematics.float2x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Unity.Mathematics.float2x3(float2x3 v) { return new Unity.Mathematics.float2x3((Unity.Mathematics.float2)v.c0, (Unity.Mathematics.float2)v.c1, (Unity.Mathematics.float2)v.c2); }

        /// <summary>Explicitly converts a single double value to a float2x3 matrix by converting it to number and assigning it to every component.</summary>
        /// <param name="v">double to convert to float2x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator float2x3(double v) { return new float2x3(v); }

        /// <summary>Explicitly converts a Unity.Mathematics.double2x3 matrix to a float2x3 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.double2x3 to convert to float2x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator float2x3(Unity.Mathematics.double2x3 v) { return new float2x3(v); }

        /// <summary>Explicitly converts a float2x3 matrix to a Unity.Mathematics.double2x3 matrix by componentwise conversion.</summary>
        /// <param name="v">float2x3 to convert to Unity.Mathematics.double2x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Unity.Mathematics.double2x3(float2x3 v) { return new Unity.Mathematics.double2x3((Unity.Mathematics.double2)v.c0, (Unity.Mathematics.double2)v.c1, (Unity.Mathematics.double2)v.c2); }


        /// <summary>Returns the result of a componentwise multiplication operation on two float2x3 matrices.</summary>
        /// <param name="lhs">Left hand side float2x3 to use to compute componentwise multiplication.</param>
        /// <param name="rhs">Right hand side float2x3 to use to compute componentwise multiplication.</param>
        /// <returns>float2x3 result of the componentwise multiplication.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator * (float2x3 lhs, float2x3 rhs) { return new float2x3 (lhs.c0 * rhs.c0, lhs.c1 * rhs.c1, lhs.c2 * rhs.c2); }

        /// <summary>Returns the result of a componentwise multiplication operation on a float2x3 matrix and a number value.</summary>
        /// <param name="lhs">Left hand side float2x3 to use to compute componentwise multiplication.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise multiplication.</param>
        /// <returns>float2x3 result of the componentwise multiplication.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator * (float2x3 lhs, number rhs) { return new float2x3 (lhs.c0 * rhs, lhs.c1 * rhs, lhs.c2 * rhs); }

        /// <summary>Returns the result of a componentwise multiplication operation on a number value and a float2x3 matrix.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise multiplication.</param>
        /// <param name="rhs">Right hand side float2x3 to use to compute componentwise multiplication.</param>
        /// <returns>float2x3 result of the componentwise multiplication.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator * (number lhs, float2x3 rhs) { return new float2x3 (lhs * rhs.c0, lhs * rhs.c1, lhs * rhs.c2); }


        /// <summary>Returns the result of a componentwise addition operation on two float2x3 matrices.</summary>
        /// <param name="lhs">Left hand side float2x3 to use to compute componentwise addition.</param>
        /// <param name="rhs">Right hand side float2x3 to use to compute componentwise addition.</param>
        /// <returns>float2x3 result of the componentwise addition.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator + (float2x3 lhs, float2x3 rhs) { return new float2x3 (lhs.c0 + rhs.c0, lhs.c1 + rhs.c1, lhs.c2 + rhs.c2); }

        /// <summary>Returns the result of a componentwise addition operation on a float2x3 matrix and a number value.</summary>
        /// <param name="lhs">Left hand side float2x3 to use to compute componentwise addition.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise addition.</param>
        /// <returns>float2x3 result of the componentwise addition.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator + (float2x3 lhs, number rhs) { return new float2x3 (lhs.c0 + rhs, lhs.c1 + rhs, lhs.c2 + rhs); }

        /// <summary>Returns the result of a componentwise addition operation on a number value and a float2x3 matrix.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise addition.</param>
        /// <param name="rhs">Right hand side float2x3 to use to compute componentwise addition.</param>
        /// <returns>float2x3 result of the componentwise addition.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator + (number lhs, float2x3 rhs) { return new float2x3 (lhs + rhs.c0, lhs + rhs.c1, lhs + rhs.c2); }


        /// <summary>Returns the result of a componentwise subtraction operation on two float2x3 matrices.</summary>
        /// <param name="lhs">Left hand side float2x3 to use to compute componentwise subtraction.</param>
        /// <param name="rhs">Right hand side float2x3 to use to compute componentwise subtraction.</param>
        /// <returns>float2x3 result of the componentwise subtraction.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator - (float2x3 lhs, float2x3 rhs) { return new float2x3 (lhs.c0 - rhs.c0, lhs.c1 - rhs.c1, lhs.c2 - rhs.c2); }

        /// <summary>Returns the result of a componentwise subtraction operation on a float2x3 matrix and a number value.</summary>
        /// <param name="lhs">Left hand side float2x3 to use to compute componentwise subtraction.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise subtraction.</param>
        /// <returns>float2x3 result of the componentwise subtraction.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator - (float2x3 lhs, number rhs) { return new float2x3 (lhs.c0 - rhs, lhs.c1 - rhs, lhs.c2 - rhs); }

        /// <summary>Returns the result of a componentwise subtraction operation on a number value and a float2x3 matrix.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise subtraction.</param>
        /// <param name="rhs">Right hand side float2x3 to use to compute componentwise subtraction.</param>
        /// <returns>float2x3 result of the componentwise subtraction.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator - (number lhs, float2x3 rhs) { return new float2x3 (lhs - rhs.c0, lhs - rhs.c1, lhs - rhs.c2); }


        /// <summary>Returns the result of a componentwise division operation on two float2x3 matrices.</summary>
        /// <param name="lhs">Left hand side float2x3 to use to compute componentwise division.</param>
        /// <param name="rhs">Right hand side float2x3 to use to compute componentwise division.</param>
        /// <returns>float2x3 result of the componentwise division.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator / (float2x3 lhs, float2x3 rhs) { return new float2x3 (lhs.c0 / rhs.c0, lhs.c1 / rhs.c1, lhs.c2 / rhs.c2); }

        /// <summary>Returns the result of a componentwise division operation on a float2x3 matrix and a number value.</summary>
        /// <param name="lhs">Left hand side float2x3 to use to compute componentwise division.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise division.</param>
        /// <returns>float2x3 result of the componentwise division.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator / (float2x3 lhs, number rhs) { return new float2x3 (lhs.c0 / rhs, lhs.c1 / rhs, lhs.c2 / rhs); }

        /// <summary>Returns the result of a componentwise division operation on a number value and a float2x3 matrix.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise division.</param>
        /// <param name="rhs">Right hand side float2x3 to use to compute componentwise division.</param>
        /// <returns>float2x3 result of the componentwise division.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator / (number lhs, float2x3 rhs) { return new float2x3 (lhs / rhs.c0, lhs / rhs.c1, lhs / rhs.c2); }


        /// <summary>Returns the result of a componentwise modulus operation on two float2x3 matrices.</summary>
        /// <param name="lhs">Left hand side float2x3 to use to compute componentwise modulus.</param>
        /// <param name="rhs">Right hand side float2x3 to use to compute componentwise modulus.</param>
        /// <returns>float2x3 result of the componentwise modulus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator % (float2x3 lhs, float2x3 rhs) { return new float2x3 (lhs.c0 % rhs.c0, lhs.c1 % rhs.c1, lhs.c2 % rhs.c2); }

        /// <summary>Returns the result of a componentwise modulus operation on a float2x3 matrix and a number value.</summary>
        /// <param name="lhs">Left hand side float2x3 to use to compute componentwise modulus.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise modulus.</param>
        /// <returns>float2x3 result of the componentwise modulus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator % (float2x3 lhs, number rhs) { return new float2x3 (lhs.c0 % rhs, lhs.c1 % rhs, lhs.c2 % rhs); }

        /// <summary>Returns the result of a componentwise modulus operation on a number value and a float2x3 matrix.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise modulus.</param>
        /// <param name="rhs">Right hand side float2x3 to use to compute componentwise modulus.</param>
        /// <returns>float2x3 result of the componentwise modulus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator % (number lhs, float2x3 rhs) { return new float2x3 (lhs % rhs.c0, lhs % rhs.c1, lhs % rhs.c2); }


        /// <summary>Returns the result of a componentwise increment operation on a float2x3 matrix.</summary>
        /// <param name="val">Value to use when computing the componentwise increment.</param>
        /// <returns>float2x3 result of the componentwise increment.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator ++ (float2x3 val) { return new float2x3 (++val.c0, ++val.c1, ++val.c2); }


        /// <summary>Returns the result of a componentwise decrement operation on a float2x3 matrix.</summary>
        /// <param name="val">Value to use when computing the componentwise decrement.</param>
        /// <returns>float2x3 result of the componentwise decrement.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator -- (float2x3 val) { return new float2x3 (--val.c0, --val.c1, --val.c2); }


        /// <summary>Returns the result of a componentwise less than operation on two float2x3 matrices.</summary>
        /// <param name="lhs">Left hand side float2x3 to use to compute componentwise less than.</param>
        /// <param name="rhs">Right hand side float2x3 to use to compute componentwise less than.</param>
        /// <returns>Unity.Mathematics.bool2x3 result of the componentwise less than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2x3 operator < (float2x3 lhs, float2x3 rhs) { return new Unity.Mathematics.bool2x3 (lhs.c0 < rhs.c0, lhs.c1 < rhs.c1, lhs.c2 < rhs.c2); }

        /// <summary>Returns the result of a componentwise less than operation on a float2x3 matrix and a number value.</summary>
        /// <param name="lhs">Left hand side float2x3 to use to compute componentwise less than.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise less than.</param>
        /// <returns>Unity.Mathematics.bool2x3 result of the componentwise less than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2x3 operator < (float2x3 lhs, number rhs) { return new Unity.Mathematics.bool2x3 (lhs.c0 < rhs, lhs.c1 < rhs, lhs.c2 < rhs); }

        /// <summary>Returns the result of a componentwise less than operation on a number value and a float2x3 matrix.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise less than.</param>
        /// <param name="rhs">Right hand side float2x3 to use to compute componentwise less than.</param>
        /// <returns>Unity.Mathematics.bool2x3 result of the componentwise less than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2x3 operator < (number lhs, float2x3 rhs) { return new Unity.Mathematics.bool2x3 (lhs < rhs.c0, lhs < rhs.c1, lhs < rhs.c2); }


        /// <summary>Returns the result of a componentwise less or equal operation on two float2x3 matrices.</summary>
        /// <param name="lhs">Left hand side float2x3 to use to compute componentwise less or equal.</param>
        /// <param name="rhs">Right hand side float2x3 to use to compute componentwise less or equal.</param>
        /// <returns>Unity.Mathematics.bool2x3 result of the componentwise less or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2x3 operator <= (float2x3 lhs, float2x3 rhs) { return new Unity.Mathematics.bool2x3 (lhs.c0 <= rhs.c0, lhs.c1 <= rhs.c1, lhs.c2 <= rhs.c2); }

        /// <summary>Returns the result of a componentwise less or equal operation on a float2x3 matrix and a number value.</summary>
        /// <param name="lhs">Left hand side float2x3 to use to compute componentwise less or equal.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise less or equal.</param>
        /// <returns>Unity.Mathematics.bool2x3 result of the componentwise less or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2x3 operator <= (float2x3 lhs, number rhs) { return new Unity.Mathematics.bool2x3 (lhs.c0 <= rhs, lhs.c1 <= rhs, lhs.c2 <= rhs); }

        /// <summary>Returns the result of a componentwise less or equal operation on a number value and a float2x3 matrix.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise less or equal.</param>
        /// <param name="rhs">Right hand side float2x3 to use to compute componentwise less or equal.</param>
        /// <returns>Unity.Mathematics.bool2x3 result of the componentwise less or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2x3 operator <= (number lhs, float2x3 rhs) { return new Unity.Mathematics.bool2x3 (lhs <= rhs.c0, lhs <= rhs.c1, lhs <= rhs.c2); }


        /// <summary>Returns the result of a componentwise greater than operation on two float2x3 matrices.</summary>
        /// <param name="lhs">Left hand side float2x3 to use to compute componentwise greater than.</param>
        /// <param name="rhs">Right hand side float2x3 to use to compute componentwise greater than.</param>
        /// <returns>Unity.Mathematics.bool2x3 result of the componentwise greater than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2x3 operator > (float2x3 lhs, float2x3 rhs) { return new Unity.Mathematics.bool2x3 (lhs.c0 > rhs.c0, lhs.c1 > rhs.c1, lhs.c2 > rhs.c2); }

        /// <summary>Returns the result of a componentwise greater than operation on a float2x3 matrix and a number value.</summary>
        /// <param name="lhs">Left hand side float2x3 to use to compute componentwise greater than.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise greater than.</param>
        /// <returns>Unity.Mathematics.bool2x3 result of the componentwise greater than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2x3 operator > (float2x3 lhs, number rhs) { return new Unity.Mathematics.bool2x3 (lhs.c0 > rhs, lhs.c1 > rhs, lhs.c2 > rhs); }

        /// <summary>Returns the result of a componentwise greater than operation on a number value and a float2x3 matrix.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise greater than.</param>
        /// <param name="rhs">Right hand side float2x3 to use to compute componentwise greater than.</param>
        /// <returns>Unity.Mathematics.bool2x3 result of the componentwise greater than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2x3 operator > (number lhs, float2x3 rhs) { return new Unity.Mathematics.bool2x3 (lhs > rhs.c0, lhs > rhs.c1, lhs > rhs.c2); }


        /// <summary>Returns the result of a componentwise greater or equal operation on two float2x3 matrices.</summary>
        /// <param name="lhs">Left hand side float2x3 to use to compute componentwise greater or equal.</param>
        /// <param name="rhs">Right hand side float2x3 to use to compute componentwise greater or equal.</param>
        /// <returns>Unity.Mathematics.bool2x3 result of the componentwise greater or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2x3 operator >= (float2x3 lhs, float2x3 rhs) { return new Unity.Mathematics.bool2x3 (lhs.c0 >= rhs.c0, lhs.c1 >= rhs.c1, lhs.c2 >= rhs.c2); }

        /// <summary>Returns the result of a componentwise greater or equal operation on a float2x3 matrix and a number value.</summary>
        /// <param name="lhs">Left hand side float2x3 to use to compute componentwise greater or equal.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise greater or equal.</param>
        /// <returns>Unity.Mathematics.bool2x3 result of the componentwise greater or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2x3 operator >= (float2x3 lhs, number rhs) { return new Unity.Mathematics.bool2x3 (lhs.c0 >= rhs, lhs.c1 >= rhs, lhs.c2 >= rhs); }

        /// <summary>Returns the result of a componentwise greater or equal operation on a number value and a float2x3 matrix.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise greater or equal.</param>
        /// <param name="rhs">Right hand side float2x3 to use to compute componentwise greater or equal.</param>
        /// <returns>Unity.Mathematics.bool2x3 result of the componentwise greater or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2x3 operator >= (number lhs, float2x3 rhs) { return new Unity.Mathematics.bool2x3 (lhs >= rhs.c0, lhs >= rhs.c1, lhs >= rhs.c2); }


        /// <summary>Returns the result of a componentwise unary minus operation on a float2x3 matrix.</summary>
        /// <param name="val">Value to use when computing the componentwise unary minus.</param>
        /// <returns>float2x3 result of the componentwise unary minus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator - (float2x3 val) { return new float2x3 (-val.c0, -val.c1, -val.c2); }


        /// <summary>Returns the result of a componentwise unary plus operation on a float2x3 matrix.</summary>
        /// <param name="val">Value to use when computing the componentwise unary plus.</param>
        /// <returns>float2x3 result of the componentwise unary plus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator + (float2x3 val) { return new float2x3 (+val.c0, +val.c1, +val.c2); }


        /// <summary>Returns the result of a componentwise equality operation on two float2x3 matrices.</summary>
        /// <param name="lhs">Left hand side float2x3 to use to compute componentwise equality.</param>
        /// <param name="rhs">Right hand side float2x3 to use to compute componentwise equality.</param>
        /// <returns>Unity.Mathematics.bool2x3 result of the componentwise equality.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2x3 operator == (float2x3 lhs, float2x3 rhs) { return new Unity.Mathematics.bool2x3 (lhs.c0 == rhs.c0, lhs.c1 == rhs.c1, lhs.c2 == rhs.c2); }

        /// <summary>Returns the result of a componentwise equality operation on a float2x3 matrix and a number value.</summary>
        /// <param name="lhs">Left hand side float2x3 to use to compute componentwise equality.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise equality.</param>
        /// <returns>Unity.Mathematics.bool2x3 result of the componentwise equality.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2x3 operator == (float2x3 lhs, number rhs) { return new Unity.Mathematics.bool2x3 (lhs.c0 == rhs, lhs.c1 == rhs, lhs.c2 == rhs); }

        /// <summary>Returns the result of a componentwise equality operation on a number value and a float2x3 matrix.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise equality.</param>
        /// <param name="rhs">Right hand side float2x3 to use to compute componentwise equality.</param>
        /// <returns>Unity.Mathematics.bool2x3 result of the componentwise equality.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2x3 operator == (number lhs, float2x3 rhs) { return new Unity.Mathematics.bool2x3 (lhs == rhs.c0, lhs == rhs.c1, lhs == rhs.c2); }


        /// <summary>Returns the result of a componentwise not equal operation on two float2x3 matrices.</summary>
        /// <param name="lhs">Left hand side float2x3 to use to compute componentwise not equal.</param>
        /// <param name="rhs">Right hand side float2x3 to use to compute componentwise not equal.</param>
        /// <returns>Unity.Mathematics.bool2x3 result of the componentwise not equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2x3 operator != (float2x3 lhs, float2x3 rhs) { return new Unity.Mathematics.bool2x3 (lhs.c0 != rhs.c0, lhs.c1 != rhs.c1, lhs.c2 != rhs.c2); }

        /// <summary>Returns the result of a componentwise not equal operation on a float2x3 matrix and a number value.</summary>
        /// <param name="lhs">Left hand side float2x3 to use to compute componentwise not equal.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise not equal.</param>
        /// <returns>Unity.Mathematics.bool2x3 result of the componentwise not equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2x3 operator != (float2x3 lhs, number rhs) { return new Unity.Mathematics.bool2x3 (lhs.c0 != rhs, lhs.c1 != rhs, lhs.c2 != rhs); }

        /// <summary>Returns the result of a componentwise not equal operation on a number value and a float2x3 matrix.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise not equal.</param>
        /// <param name="rhs">Right hand side float2x3 to use to compute componentwise not equal.</param>
        /// <returns>Unity.Mathematics.bool2x3 result of the componentwise not equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2x3 operator != (number lhs, float2x3 rhs) { return new Unity.Mathematics.bool2x3 (lhs != rhs.c0, lhs != rhs.c1, lhs != rhs.c2); }


        /// <summary>Returns the result of a componentwise bitwise and operation on two float2x3 matrices.</summary>
        /// <param name="lhs">Left hand side float2x3 to use to compute componentwise bitwise and.</param>
        /// <param name="rhs">Right hand side float2x3 to use to compute componentwise bitwise and.</param>
        /// <returns>float2x3 result of the componentwise bitwise and.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator & (float2x3 lhs, float2x3 rhs) { return new float2x3 (lhs.c0 & rhs.c0, lhs.c1 & rhs.c1, lhs.c2 & rhs.c2); }

        /// <summary>Returns the result of a componentwise bitwise and operation on a float2x3 matrix and a number value.</summary>
        /// <param name="lhs">Left hand side float2x3 to use to compute componentwise bitwise and.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise bitwise and.</param>
        /// <returns>float2x3 result of the componentwise bitwise and.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator & (float2x3 lhs, number rhs) { return new float2x3 (lhs.c0 & rhs, lhs.c1 & rhs, lhs.c2 & rhs); }

        /// <summary>Returns the result of a componentwise bitwise and operation on a number value and a float2x3 matrix.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise bitwise and.</param>
        /// <param name="rhs">Right hand side float2x3 to use to compute componentwise bitwise and.</param>
        /// <returns>float2x3 result of the componentwise bitwise and.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator & (number lhs, float2x3 rhs) { return new float2x3 (lhs & rhs.c0, lhs & rhs.c1, lhs & rhs.c2); }


        /// <summary>Returns the result of a componentwise bitwise or operation on two float2x3 matrices.</summary>
        /// <param name="lhs">Left hand side float2x3 to use to compute componentwise bitwise or.</param>
        /// <param name="rhs">Right hand side float2x3 to use to compute componentwise bitwise or.</param>
        /// <returns>float2x3 result of the componentwise bitwise or.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator | (float2x3 lhs, float2x3 rhs) { return new float2x3 (lhs.c0 | rhs.c0, lhs.c1 | rhs.c1, lhs.c2 | rhs.c2); }

        /// <summary>Returns the result of a componentwise bitwise or operation on a float2x3 matrix and a number value.</summary>
        /// <param name="lhs">Left hand side float2x3 to use to compute componentwise bitwise or.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise bitwise or.</param>
        /// <returns>float2x3 result of the componentwise bitwise or.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator | (float2x3 lhs, number rhs) { return new float2x3 (lhs.c0 | rhs, lhs.c1 | rhs, lhs.c2 | rhs); }

        /// <summary>Returns the result of a componentwise bitwise or operation on a number value and a float2x3 matrix.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise bitwise or.</param>
        /// <param name="rhs">Right hand side float2x3 to use to compute componentwise bitwise or.</param>
        /// <returns>float2x3 result of the componentwise bitwise or.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator | (number lhs, float2x3 rhs) { return new float2x3 (lhs | rhs.c0, lhs | rhs.c1, lhs | rhs.c2); }


        /// <summary>Returns the result of a componentwise bitwise exclusive or operation on two float2x3 matrices.</summary>
        /// <param name="lhs">Left hand side float2x3 to use to compute componentwise bitwise exclusive or.</param>
        /// <param name="rhs">Right hand side float2x3 to use to compute componentwise bitwise exclusive or.</param>
        /// <returns>float2x3 result of the componentwise bitwise exclusive or.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator ^ (float2x3 lhs, float2x3 rhs) { return new float2x3 (lhs.c0 ^ rhs.c0, lhs.c1 ^ rhs.c1, lhs.c2 ^ rhs.c2); }

        /// <summary>Returns the result of a componentwise bitwise exclusive or operation on a float2x3 matrix and a number value.</summary>
        /// <param name="lhs">Left hand side float2x3 to use to compute componentwise bitwise exclusive or.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise bitwise exclusive or.</param>
        /// <returns>float2x3 result of the componentwise bitwise exclusive or.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator ^ (float2x3 lhs, number rhs) { return new float2x3 (lhs.c0 ^ rhs, lhs.c1 ^ rhs, lhs.c2 ^ rhs); }

        /// <summary>Returns the result of a componentwise bitwise exclusive or operation on a number value and a float2x3 matrix.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise bitwise exclusive or.</param>
        /// <param name="rhs">Right hand side float2x3 to use to compute componentwise bitwise exclusive or.</param>
        /// <returns>float2x3 result of the componentwise bitwise exclusive or.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator ^ (number lhs, float2x3 rhs) { return new float2x3 (lhs ^ rhs.c0, lhs ^ rhs.c1, lhs ^ rhs.c2); }


        /// <summary>Returns the result of a componentwise bitwise negation operation on a float2x3 matrix.</summary>
        /// <param name="value">the float2x3 value to bitwise negation operation.</param>
        /// <returns>float2x3 result of the componentwise bitwise negation.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 operator ~ (float2x3 value) { return new float2x3 (~value.c0, ~value.c1, ~value.c2); }


        /// <summary>Returns the float2 element at a specified index.</summary>
        unsafe public ref float2 this[int index]
        {
            get
            {
#if ENABLE_UNITY_COLLECTIONS_CHECKS
                if ((uint)index >= 3)
                    throw new System.ArgumentException("index must be between[0...2]");
#endif
                fixed (float2x3* array = &this) { return ref ((float2*)array)[index]; }
            }
        }

        /// <summary>Returns true if the float2x3 is equal to a given float2x3, false otherwise.</summary>
        /// <param name="rhs">Right hand side argument to compare equality with.</param>
        /// <returns>The result of the equality comparison.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(float2x3 rhs) { return c0.Equals(rhs.c0) && c1.Equals(rhs.c1) && c2.Equals(rhs.c2); }

        /// <summary>Returns true if the float2x3 is equal to a given float2x3, false otherwise.</summary>
        /// <param name="o">Right hand side argument to compare equality with.</param>
        /// <returns>The result of the equality comparison.</returns>
        public override bool Equals(object o) { return o is float2x3 converted && Equals(converted); }


        /// <summary>Returns a hash code for the float2x3.</summary>
        /// <returns>The computed hash code.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override int GetHashCode() { return (int)math.hash(this); }


        /// <summary>Returns a string representation of the float2x3.</summary>
        /// <returns>String representation of the value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override string ToString()
        {
            return string.Format("float2x3({0}, {1}, {2},  {3}, {4}, {5})", c0.x, c1.x, c2.x, c0.y, c1.y, c2.y);
        }

        /// <summary>Returns a string representation of the float2x3 using a specified format and culture-specific format information.</summary>
        /// <param name="format">Format string to use during string formatting.</param>
        /// <param name="formatProvider">Format provider to use during string formatting.</param>
        /// <returns>String representation of the value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return string.Format("float2x3({0}, {1}, {2},  {3}, {4}, {5})", c0.x.ToString(format, formatProvider), c1.x.ToString(format, formatProvider), c2.x.ToString(format, formatProvider), c0.y.ToString(format, formatProvider), c1.y.ToString(format, formatProvider), c2.y.ToString(format, formatProvider));
        }

    }

    public static partial class math
    {
        /// <summary>Returns a float2x3 matrix constructed from three float2 vectors.</summary>
        /// <param name="c0">The matrix column c0 will be set to this value.</param>
        /// <param name="c1">The matrix column c1 will be set to this value.</param>
        /// <param name="c2">The matrix column c2 will be set to this value.</param>
        /// <returns>float2x3 constructed from arguments.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 float2x3(float2 c0, float2 c1, float2 c2) { return new float2x3(c0, c1, c2); }

        /// <summary>Returns a float2x3 matrix constructed from from 6 number values given in row-major order.</summary>
        /// <param name="m00">The matrix at row 0, column 0 will be set to this value.</param>
        /// <param name="m01">The matrix at row 0, column 1 will be set to this value.</param>
        /// <param name="m02">The matrix at row 0, column 2 will be set to this value.</param>
        /// <param name="m10">The matrix at row 1, column 0 will be set to this value.</param>
        /// <param name="m11">The matrix at row 1, column 1 will be set to this value.</param>
        /// <param name="m12">The matrix at row 1, column 2 will be set to this value.</param>
        /// <returns>float2x3 constructed from arguments.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 float2x3(number m00, number m01, number m02,
                                        number m10, number m11, number m12)
        {
            return new float2x3(m00, m01, m02,
                                m10, m11, m12);
        }

        /// <summary>Returns a float2x3 matrix constructed from a single number value by assigning it to every component.</summary>
        /// <param name="v">number to convert to float2x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 float2x3(number v) { return new float2x3(v); }

        /// <summary>Returns a float2x3 matrix constructed from a single bool value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">bool to convert to float2x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 float2x3(bool v) { return new float2x3(v); }

        /// <summary>Return a float2x3 matrix constructed from a Unity.Mathematics.bool2x3 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.bool2x3 to convert to float2x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 float2x3(Unity.Mathematics.bool2x3 v) { return new float2x3(v); }

        /// <summary>Returns a float2x3 matrix constructed from a single int value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">int to convert to float2x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 float2x3(int v) { return new float2x3(v); }

        /// <summary>Return a float2x3 matrix constructed from a Unity.Mathematics.int2x3 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.int2x3 to convert to float2x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 float2x3(Unity.Mathematics.int2x3 v) { return new float2x3(v); }

        /// <summary>Returns a float2x3 matrix constructed from a single uint value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">uint to convert to float2x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 float2x3(uint v) { return new float2x3(v); }

        /// <summary>Return a float2x3 matrix constructed from a Unity.Mathematics.uint2x3 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.uint2x3 to convert to float2x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 float2x3(Unity.Mathematics.uint2x3 v) { return new float2x3(v); }

        /// <summary>Returns a float2x3 matrix constructed from a single float value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">float to convert to float2x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 float2x3(float v) { return new float2x3(v); }

        /// <summary>Return a float2x3 matrix constructed from a Unity.Mathematics.float2x3 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.float2x3 to convert to float2x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 float2x3(Unity.Mathematics.float2x3 v) { return new float2x3(v); }

        /// <summary>Returns a float2x3 matrix constructed from a single double value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">double to convert to float2x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 float2x3(double v) { return new float2x3(v); }

        /// <summary>Return a float2x3 matrix constructed from a Unity.Mathematics.double2x3 matrix by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.double2x3 to convert to float2x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float2x3 float2x3(Unity.Mathematics.double2x3 v) { return new float2x3(v); }

        /// <summary>Return the float3x2 transpose of a float2x3 matrix.</summary>
        /// <param name="v">Value to transpose.</param>
        /// <returns>Transposed value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float3x2 transpose(float2x3 v)
        {
            return float3x2(
                v.c0.x, v.c0.y,
                v.c1.x, v.c1.y,
                v.c2.x, v.c2.y);
        }

        /// <summary>Returns a uint hash code of a float2x3 matrix.</summary>
        /// <param name="v">Matrix value to hash.</param>
        /// <returns>uint hash of the argument.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint hash(float2x3 v)
        {
            return Unity.Mathematics.math.csum(asuint(v.c0) * new Unity.Mathematics.uint2(0x93C30C2Bu, 0xDCAF0351u) +
                        asuint(v.c1) * new Unity.Mathematics.uint2(0x6E050B01u, 0x750FDBF5u) +
                        asuint(v.c2) * new Unity.Mathematics.uint2(0x7F3DD499u, 0x52EAAEBBu)) + 0x4599C793u;
        }

        /// <summary>
        /// Returns a Unity.Mathematics.uint2 vector hash code of a float2x3 matrix.
        /// When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash
        /// that are only reduced to a narrow uint hash at the very end instead of at every step.
        /// </summary>
        /// <param name="v">Matrix value to hash.</param>
        /// <returns>Unity.Mathematics.uint2 hash of the argument.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.uint2 hashwide(float2x3 v)
        {
            return (asuint(v.c0) * new Unity.Mathematics.uint2(0x83B5E729u, 0xC267163Fu) +
                    asuint(v.c1) * new Unity.Mathematics.uint2(0x67BC9149u, 0xAD7C5EC1u) +
                    asuint(v.c2) * new Unity.Mathematics.uint2(0x822A7D6Du, 0xB492BF15u)) + 0xD37220E3u;
        }

    }
}
